---
import Layout from '../../../../layouts/Layout.astro'
import path from 'node:path'
import { promises as fs } from 'node:fs'
import { marked } from 'marked'
import RigthArrowMicroIcon from '../../../../components/icons/RigthArrowMicroIcon.astro'
import LeftArrowMicroIcon from '../../../../components/icons/LeftArrowMicroIcon.astro'
import './temasNavbar.css'

export async function getStaticPaths() {
  const materiasDirectory = path.resolve('./public/materias')
  let materias: string[] = []
  try {
    materias = await fs.readdir(materiasDirectory)
  } catch (error) {
    throw new Error('Error reading materias directory')
  }

  let paths: { params: any }[] = []
  for (const materia of materias) {
    const temasDirectory = path.resolve(`./public/materias/${materia}`)
    let temas: string[] = []
    try {
      temas = await fs.readdir(temasDirectory)
      // Generate paths for each tema
      paths = paths.concat(
        temas.map((tema) => ({
          params: { materia, tema: tema.replace('.md', '') } // Remove .md extension
        }))
      )
    } catch (error) {
      throw new Error(`Error reading temas for ${materia}`)
    }
  }

  return paths
}

const { materia, tema } = Astro.params

let md = ''
try {
  md = await fs.readFile(`./public/materias/${materia}/${tema}/blog.md`, {
    encoding: 'utf-8'
  })
} catch (error) {}

const mdContent = marked(md)

const temasDirectory = path.resolve(`./public/materias/${materia}`)

let temas: string[] = []
try {
  temas = await fs.readdir(temasDirectory)
} catch (error) {
  throw new Error('There was an error')
}
---

<Layout title={tema.replace(/-/g, ' ')!}>
  <header
    class='divide-border flex divide-x [&>*:first-child]:pr-2 [&>*:last-child]:pl-2'
  >
    <a href={`/materias/${materia}`} class='group flex items-center gap-2'>
      <span
        class='translate-x-2 opacity-0 transition group-hover:translate-x-0 group-hover:opacity-100'
        ><LeftArrowMicroIcon /></span
      >
      <span class='-translate-x-4 transition group-hover:translate-x-0'>
        {materia}
      </span>
    </a>
    <span class='capitalize' transition:name={`tema-${tema}`}>
      {tema.replace(/-/g, ' ')}
    </span>
  </header>
  <div set:html={mdContent} />
  <aside
    class='pointer-events-none fixed left-0 grid w-full grid-cols-[1fr_805px_1fr]'
  >
    <nav
      class='temas-navbar pointer-events-auto hidden flex-col items-end pr-8 tablet:flex'
    >
      {
        temas.map((t) => (
          <a
            href={`/materias/${materia}/${t}`}
            data-selected={t === tema ? 'true' : 'false'}
            class={`hover:bg-secondary group flex w-full items-center justify-end gap-2 rounded-r-lg py-2 pr-4 text-sm capitalize no-underline transition-colors ${t === tema && 'bg-accent'}`}
          >
            {t.replace(/-/g, ' ')}
            <span class='-translate-x-2 opacity-0 transition group-hover:translate-x-0 group-hover:opacity-100'>
              <RigthArrowMicroIcon />
            </span>
          </a>
        ))
      }
    </nav>
  </aside>
</Layout>
