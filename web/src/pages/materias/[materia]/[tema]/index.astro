---
import { marked } from 'marked'
import { promises as fs } from 'node:fs'
import path from 'node:path'
import BreadcrumbLink from '../../../../components/ui/BreadcrumbLink.astro'
import AsideMenuLayout from '../../../../layouts/AsideMenuLayout.astro'
import Layout from '../../../../layouts/Layout.astro'
import './temasNavbar.css'

export async function getStaticPaths() {
  const materiasDirectory = path.resolve('./public/materias')
  let materias: string[] = []
  try {
    materias = await fs.readdir(materiasDirectory)
  } catch (error) {
    throw new Error('Error reading materias directory')
  }

  let paths: { params: any }[] = []
  for (const materia of materias) {
    const temasDirectory = path.resolve(`./public/materias/${materia}`)
    let temas: string[] = []
    try {
      temas = await fs.readdir(temasDirectory)
      paths = paths.concat(
        temas.map((tema) => ({
          params: { materia, tema: tema.replace('.md', '') }
        }))
      )
    } catch (error) {
      throw new Error(`Error reading temas for ${materia}`)
    }
  }

  return paths
}

const { materia, tema } = Astro.params

let md = ''
try {
  md = await fs.readFile(`./public/materias/${materia}/${tema}/blog.md`, {
    encoding: 'utf-8'
  })
} catch (error) {}

const mdContent = marked(md)

const temasDirectory = path.resolve(`./public/materias/${materia}`)

let temas: string[] = []
try {
  temas = await fs.readdir(temasDirectory)
} catch (error) {
  throw new Error('There was an error')
}

const ejerciciosDirectory = path.resolve(
  `./public/materias/${materia}/${tema}/ejercicios`
)

let ejercicios: string[] = []
try {
  const files = await fs.readdir(ejerciciosDirectory)
  ejercicios = files.map((file) => file.split('.')[0])
} catch (error) {
  ejercicios = []
}

function getH2Headers() {
  const content = mdContent.toString()

  const regex = /<h2>(.*?)<\/h2>/g
  let match
  let headersList = []

  while ((match = regex.exec(content)) !== null) {
    let headerText = match[1].trim()
    // Remove innecesary characters
    headerText = headerText.replace(/[^a-zA-Z0-9\s.]/g, '').trim()
    headersList.push(headerText)
  }

  return headersList
}
---

<Layout title={tema.replace(/-/g, ' ')!}>
  <header
    class='flex divide-x divide-border *:px-2 [&>*:first-child]:pr-2 [&>*:last-child]:pl-2'
  >
    <BreadcrumbLink href={`/materias`} value='materias' />
    <BreadcrumbLink href={`/materias/${materia}`} value={materia} />
    <span class='capitalize' transition:name={`tema-${tema}`}>
      {tema.replace(/-/g, ' ')}
    </span>
  </header>
  <div set:html={mdContent} />
  <AsideMenuLayout
    active={tema.replace(/-/g, ' ')}
    temas={temas.map((tema) => ({
      href: `/materias/${materia}/${tema}`,
      value: tema.replace(/-/g, ' ')
    }))}
    ejercicios={ejercicios.map((ejercicio) => ({
      href: `/materias/${materia}/${tema}/${ejercicio}`,
      value: ejercicio.replace(/-/g, ' ')
    }))}
    headers={getH2Headers()}
  />
</Layout>
